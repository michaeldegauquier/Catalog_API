// <auto-generated />
using System;
using Catalog.API.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Catalog.API.Migrations
{
    [DbContext(typeof(CatalogContext))]
    partial class CatalogContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Catalog.API.Models.Brand", b =>
                {
                    b.Property<string>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BrandfamilyKey");

                    b.Property<string>("LogoLargeUrl");

                    b.Property<string>("LogoUrl");

                    b.Property<string>("Name");

                    b.Property<string>("ShopUrl");

                    b.HasKey("Key");

                    b.HasIndex("BrandfamilyKey");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("Catalog.API.Models.Brandfamily", b =>
                {
                    b.Property<string>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("ShopUrl");

                    b.HasKey("Key");

                    b.ToTable("Brandfamily");
                });

            modelBuilder.Entity("Catalog.API.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("Catalog.API.Models.Product", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ActivationDate");

                    b.Property<bool>("Available");

                    b.Property<string>("BrandKey");

                    b.Property<string>("Color");

                    b.Property<string>("ModelId");

                    b.Property<string>("Name");

                    b.Property<string>("Season");

                    b.Property<string>("SeasonYear");

                    b.Property<string>("ShopUrl");

                    b.HasKey("Id");

                    b.HasIndex("BrandKey");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Catalog.API.Models.ProductGender", b =>
                {
                    b.Property<int>("GenderId");

                    b.Property<string>("ProductId");

                    b.HasKey("GenderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductGender");
                });

            modelBuilder.Entity("Catalog.API.Models.Unit", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Available");

                    b.Property<string>("ProductId");

                    b.Property<string>("Size");

                    b.Property<int>("Stock");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("Catalog.API.Models.Brand", b =>
                {
                    b.HasOne("Catalog.API.Models.Brandfamily", "BrandFamily")
                        .WithMany()
                        .HasForeignKey("BrandfamilyKey");
                });

            modelBuilder.Entity("Catalog.API.Models.Product", b =>
                {
                    b.HasOne("Catalog.API.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandKey");
                });

            modelBuilder.Entity("Catalog.API.Models.ProductGender", b =>
                {
                    b.HasOne("Catalog.API.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Catalog.API.Models.Product", "Product")
                        .WithMany("ProductGenders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Catalog.API.Models.Unit", b =>
                {
                    b.HasOne("Catalog.API.Models.Product", "Product")
                        .WithMany("Units")
                        .HasForeignKey("ProductId");

                    b.OwnsOne("Catalog.API.Models.Price", "OriginalPrice", b1 =>
                        {
                            b1.Property<string>("UnitId");

                            b1.Property<string>("Currency");

                            b1.Property<string>("Formatted");

                            b1.Property<float>("Value");

                            b1.HasKey("UnitId");

                            b1.ToTable("Unit");

                            b1.HasOne("Catalog.API.Models.Unit")
                                .WithOne("OriginalPrice")
                                .HasForeignKey("Catalog.API.Models.Price", "UnitId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Catalog.API.Models.Price", "Price", b1 =>
                        {
                            b1.Property<string>("UnitId");

                            b1.Property<string>("Currency");

                            b1.Property<string>("Formatted");

                            b1.Property<float>("Value");

                            b1.HasKey("UnitId");

                            b1.ToTable("Unit");

                            b1.HasOne("Catalog.API.Models.Unit")
                                .WithOne("Price")
                                .HasForeignKey("Catalog.API.Models.Price", "UnitId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
